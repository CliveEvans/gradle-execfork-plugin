group = 'com.github.psxpaul'
version = '0.1.1'
buildDir = "build/gradle"

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.4'
  }
}

dependencies {
  compile gradleApi()
  compile 'org.jetbrains.kotlin:kotlin-stdlib:1.0.4'

  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:hamcrest-all:1.3'
}

uploadArchives {
  repositories {
    mavenLocal()

    mavenDeployer {
      beforeDeployment{ MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: project.properties['ossrhUser'], password: project.properties['ossrhPassword'])
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: project.properties['ossrhUser'], password: project.properties['ossrhPassword'])
      }

      pom.project {
        name 'Gradle-Execfork-Plugin'
        description 'A gradle plugin to execute applications in the background'
        packaging 'jar'
        url 'https://github.com/psxpaul/gradle-execfork-plugin'

        developers {
          developer {
            id 'psxpaul'
            name 'Paul Roberts'
            email 'psxpaul@gmail.com'
          }
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        scm {
          connection 'scm:git:git://github.com/psxpaul/gradle-execfork-plugin.git'
          developerConnection 'scm:git:git@github.com:psxpaul/gradle-execfork-plugin.git'
          url 'https://github.com/psxpaul/gradle-execfork-plugin'
        }
      }
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
}

task cleanSampleProjects(type: GradleBuild, dependsOn: install) {
  buildFile = "${project.rootDir}/sample_projects/build.gradle"
  tasks = [ 'clean' ]
}
clean.finalizedBy cleanSampleProjects

task buildSampleProjects(type: GradleBuild, dependsOn: install) {
  buildFile = "${project.rootDir}/sample_projects/build.gradle"
  tasks = [ 'build' ]
}
build.finalizedBy buildSampleProjects

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.1'
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  required { gradle.taskGraph.hasTask("uploadArchives") }
  sign configurations.archives
}
